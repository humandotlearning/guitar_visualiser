{"version":3,"file":"static/js/519.d71cc9f8.chunk.js","mappings":"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","sources":["components/AudioPlayback.jsx","utils/soundfontAudioUtils.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport * as SoundfontAudio from '../utils/soundfontAudioUtils';\nimport { getScaleNotes, SCALE_LIBRARY } from '../utils/musicTheory';\nimport './SoundSettings.css';\n\nconst AudioPlayback = ({ rootNote, selectedScale, selectedChord, selectedInstrument, onInstrumentChange }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioInitialized, setAudioInitialized] = useState(false);\n  const [activeElement, setActiveElement] = useState(null);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [volume, setVolume] = useState(0.8);\n  const [sustain, setSustain] = useState(1.5);\n  const [localInstrument, setLocalInstrument] = useState(selectedInstrument || 'acoustic_guitar_steel');\n  \n  // Reference to detect clicks outside the settings panel\n  const settingsRef = useRef(null);\n\n  // Available guitar instruments\n  const instruments = {\n    'acoustic_guitar_nylon': 'Acoustic Guitar (nylon)',\n    'acoustic_guitar_steel': 'Acoustic Guitar (steel)',\n    'electric_guitar_clean': 'Electric Guitar (clean)',\n    'electric_guitar_jazz': 'Electric Guitar (jazz)',\n    'electric_guitar_muted': 'Electric Guitar (muted)',\n    'overdriven_guitar': 'Overdriven Guitar',\n    'distortion_guitar': 'Distortion Guitar',\n    'guitar_harmonics': 'Guitar Harmonics'\n  };\n\n  // Get scale notes if rootNote and selectedScale are provided\n  const scaleNotes = selectedScale && rootNote ? \n    getScaleNotes(rootNote, SCALE_LIBRARY[selectedScale.category][selectedScale.name]) : [];\n\n  // Close settings when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (settingsRef.current && !settingsRef.current.contains(event.target)) {\n        setIsSettingsOpen(false);\n      }\n    }\n\n    // Bind the event listener\n    if (isSettingsOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isSettingsOpen]);\n\n  // Initialize audio context on mount and handle instrument changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const initAudio = async () => {\n        try {\n          await SoundfontAudio.initializeAudio();\n          await SoundfontAudio.loadInstrument(localInstrument);\n          // Apply audio settings\n          SoundfontAudio.setVolume(volume);\n          SoundfontAudio.setSustain(sustain);\n          setAudioInitialized(true);\n        } catch (error) {\n          console.error('Error initializing audio:', error);\n        }\n      };\n\n      // Initialize on first user interaction\n      const handleFirstInteraction = () => {\n        initAudio();\n        document.removeEventListener('click', handleFirstInteraction);\n      };\n\n      document.addEventListener('click', handleFirstInteraction, { once: true });\n\n      return () => {\n        document.removeEventListener('click', handleFirstInteraction);\n      };\n    }\n  }, []);\n\n  // Handle instrument and audio setting changes\n  useEffect(() => {\n    if (audioInitialized) {\n      const updateAudioSettings = async () => {\n        try {\n          if (selectedInstrument && selectedInstrument !== localInstrument) {\n            setLocalInstrument(selectedInstrument);\n            await SoundfontAudio.loadInstrument(selectedInstrument);\n          }\n          // Update audio settings\n          SoundfontAudio.setVolume(volume);\n          SoundfontAudio.setSustain(sustain);\n        } catch (error) {\n          console.error('Error updating audio settings:', error);\n        }\n      };\n      updateAudioSettings();\n    }\n  }, [selectedInstrument, volume, sustain, audioInitialized, localInstrument]);\n\n  // Play a single note with the current instrument\n  const playNote = async (note, duration = null) => {\n    if (!audioInitialized) return;\n    try {\n      await SoundfontAudio.playNote(note, duration);\n    } catch (error) {\n      console.error('Error playing note:', error);\n    }\n  };\n\n  // Play the entire scale sequentially\n  const playScale = async () => {\n    if (!audioInitialized || isPlaying || scaleNotes.length === 0) return;\n    \n    setActiveElement('scale');\n    setIsPlaying(true);\n    try {\n      // Play notes sequentially with a delay between them\n      for (let i = 0; i < scaleNotes.length; i++) {\n        await new Promise(resolve => {\n          setTimeout(() => {\n            playNote(scaleNotes[i]);\n            resolve();\n          }, i === 0 ? 0 : 500); // No delay for first note\n        });\n      }\n    } catch (err) {\n      console.error('Error playing scale:', err);\n    } finally {\n      setTimeout(() => setIsPlaying(false), 500);\n    }\n  };\n\n  // Play chord (all notes together)\n  const playChord = async () => {\n    if (!audioInitialized || isPlaying || !selectedChord || selectedChord.length === 0) return;\n    \n    setActiveElement('chord');\n    setIsPlaying(true);\n    try {\n      await SoundfontAudio.playChord(selectedChord);\n      setTimeout(() => setIsPlaying(false), 1500);\n    } catch (error) {\n      console.error('Error playing chord:', error);\n      setIsPlaying(false);\n    }\n  };\n\n  // Play an arpeggio of the selected chord\n  const playArpeggio = async () => {\n    if (!audioInitialized || isPlaying || !selectedChord || selectedChord.length === 0) return;\n    \n    setActiveElement('arpeggio');\n    setIsPlaying(true);\n    try {\n      // Play chord notes sequentially\n      for (let i = 0; i < selectedChord.length; i++) {\n        await new Promise(resolve => {\n          setTimeout(() => {\n            playNote(selectedChord[i]);\n            resolve();\n          }, i === 0 ? 0 : 250); // Faster than scale for arpeggio\n        });\n      }\n    } catch (error) {\n      console.error('Error playing arpeggio:', error);\n    } finally {\n      setTimeout(() => setIsPlaying(false), 500);\n    }\n  };\n\n  // Play a test note with the current instrument\n  const playTestNote = async () => {\n    try {\n      // Play a simple E chord to test the instrument\n      await SoundfontAudio.playChord(['E', 'G#', 'B'], sustain);\n    } catch (error) {\n      console.error('Error playing test note:', error);\n    }\n  };\n\n  // Get the first chord note for display\n  const getChordRootName = () => {\n    return selectedChord && selectedChord.length > 0 ? selectedChord[0] : '';\n  };\n\n  // Close the settings panel\n  const closeSettings = () => {\n    setIsSettingsOpen(false);\n  };\n\n  return (\n    <div className=\"audio-playback relative\">\n      {/* Overlay for when settings are open */}\n      {isSettingsOpen && <div className=\"overlay\" onClick={closeSettings}></div>}\n      \n      <div className=\"flex justify-between items-center mb-2\">\n        <div>\n          <h2 className=\"text-xl font-semibold\">Audio Playback</h2>\n          <p className=\"text-sm text-gray-600\">Using: {instruments[localInstrument]}</p>\n        </div>\n        \n        {/* Settings button */}\n        <button \n          className={`settings-toggle settings-toggle-small ${isSettingsOpen ? 'active' : ''}`}\n          onClick={() => setIsSettingsOpen(!isSettingsOpen)}\n          aria-label=\"Sound Settings\"\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n            <circle cx=\"10\" cy=\"10\" r=\"2\"></circle>\n            <path d=\"M13.45 13.45L13 17h-6l-.45-3.55a6.07 6.07 0 01-1.64-.95L1.5 14.5.5 12l2.9-1.74c-.02-.17-.03-.34-.03-.51 0-.17.01-.34.03-.51L.5 7.5l1-2.5 3.41 2c.53-.38 1.07-.7 1.64-.95L7 2.5h6l.45 3.55c.57.25 1.11.57 1.64.95l3.41-2 1 2.5-2.9 1.74c.02.17.03.34.03.51 0 .17-.01.34-.03.51l2.9 1.74-1 2.5-3.41-2a6.07 6.07 0 01-1.64.95z\"></path>\n          </svg>\n        </button>\n      </div>\n        \n      {/* Settings panel (modal style) */}\n      {isSettingsOpen && (\n        <div className=\"settings-panel settings-panel-audio\" ref={settingsRef}>\n          <div className=\"settings-header\">\n            <div className=\"settings-title\">Audio Settings</div>\n            <button className=\"settings-close\" onClick={closeSettings}>\n              ×\n            </button>\n          </div>\n\n          <div className=\"setting-group\">\n            <label htmlFor=\"audio-instrument-select\">Guitar Sound</label>\n            <div className=\"instrument-controls instrument-row\">\n              <div className=\"selected-instrument\">\n                <span className=\"selected-instrument-name\">{instruments[localInstrument]}</span>\n              </div>\n              <select\n                id=\"audio-instrument-select\"\n                value={localInstrument}\n                onChange={(e) => {\n                  setLocalInstrument(e.target.value);\n                  onInstrumentChange(e.target.value);\n                }}\n                className=\"instrument-select\"\n              >\n                {Object.entries(instruments).map(([value, name]) => (\n                  <option key={value} value={value}>\n                    {name}\n                  </option>\n                ))}\n              </select>\n              <button \n                className=\"test-sound-button\"\n                onClick={playTestNote}\n              >\n                Test Sound\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"setting-group\">\n            <div className=\"slider-container\">\n              <label htmlFor=\"volume-control-audio\">Volume: {Math.round(volume * 100)}%</label>\n              <div className=\"slider-wrapper\">\n                <input\n                  id=\"volume-control-audio\"\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"1\"\n                  step=\"0.05\"\n                  value={volume}\n                  onChange={(e) => setVolume(parseFloat(e.target.value))}\n                  className=\"slider\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"setting-group\">\n            <div className=\"slider-container\">\n              <label htmlFor=\"sustain-control-audio\">Sustain: {sustain.toFixed(1)}s</label>\n              <div className=\"slider-wrapper\">\n                <input\n                  id=\"sustain-control-audio\"\n                  type=\"range\"\n                  min=\"0.5\"\n                  max=\"3\"\n                  step=\"0.1\"\n                  value={sustain}\n                  onChange={(e) => setSustain(parseFloat(e.target.value))}\n                  className=\"slider\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n        \n      <div className=\"grid grid-cols-3 gap-2\">\n        <button\n          onClick={playScale}\n          disabled={isPlaying || scaleNotes.length === 0}\n          className={`p-2 ${isPlaying && activeElement === 'scale' ? 'bg-green-500' : 'bg-blue-500'} text-white rounded disabled:opacity-50`}\n        >\n          {isPlaying && activeElement === 'scale' ? 'Playing...' : `${rootNote} ${selectedScale?.name || ''} Scale`}\n        </button>\n        <button\n          onClick={playChord}\n          disabled={isPlaying || !selectedChord || selectedChord.length === 0}\n          className={`p-2 ${isPlaying && activeElement === 'chord' ? 'bg-green-500' : 'bg-blue-500'} text-white rounded disabled:opacity-50`}\n        >\n          {isPlaying && activeElement === 'chord' ? 'Playing...' : `${getChordRootName()} Chord`}\n        </button>\n        <button\n          onClick={playArpeggio}\n          disabled={isPlaying || !selectedChord || selectedChord.length === 0}\n          className={`p-2 ${isPlaying && activeElement === 'arpeggio' ? 'bg-green-500' : 'bg-blue-500'} text-white rounded disabled:opacity-50`}\n        >\n          {isPlaying && activeElement === 'arpeggio' ? 'Playing...' : `${getChordRootName()} Arpeggio`}\n        </button>\n      </div>\n      {!audioInitialized && (\n        <p className=\"text-sm text-gray-500 mt-2\">\n          Click anywhere to initialize audio...\n        </p>\n      )}\n      {selectedChord && selectedChord.length > 0 && (\n        <div className=\"mt-2\">\n          <p className=\"text-sm\">Selected Chord: <span className=\"font-medium\">{selectedChord.join(' - ')}</span></p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nAudioPlayback.propTypes = {\n  rootNote: PropTypes.string,\n  selectedScale: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  selectedChord: PropTypes.array,\n  selectedInstrument: PropTypes.string,\n  onInstrumentChange: PropTypes.func.isRequired\n};\n\nexport default AudioPlayback;","// File: src/utils/soundfontAudioUtils.js\nimport Soundfont from 'soundfont-player';\n\nlet audioContext = null;\nlet instrument = null;\nlet isLoading = false;\nlet loadPromise = null;\n\n// Sound settings\nlet globalVolume = 0.8;\nlet globalSustain = 1.5;\nlet currentInstrumentName = '';\n\nexport const INSTRUMENTS = {\n  'acoustic_guitar_nylon': 'Acoustic Guitar (nylon)',\n  'acoustic_guitar_steel': 'Acoustic Guitar (steel)',\n  'electric_guitar_clean': 'Electric Guitar (clean)',\n  'electric_guitar_jazz': 'Electric Guitar (jazz)',\n  'electric_guitar_muted': 'Electric Guitar (muted)',\n  'overdriven_guitar': 'Overdriven Guitar',\n  'distortion_guitar': 'Distortion Guitar',\n  'guitar_harmonics': 'Guitar Harmonics'\n};\n\n// Default instrument\nconst DEFAULT_INSTRUMENT = 'acoustic_guitar_steel';\n\n// Initialize audio context\nexport const initializeAudio = async () => {\n  if (!audioContext) {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    await audioContext.resume();\n    console.log('Audio context initialized');\n  }\n  return audioContext;\n};\n\n// Set global volume (0-1)\nexport const setVolume = (volume) => {\n  if (volume >= 0 && volume <= 1) {\n    globalVolume = volume;\n    return true;\n  }\n  return false;\n};\n\n// Set global sustain (seconds)\nexport const setSustain = (sustain) => {\n  if (sustain >= 0.1) {\n    globalSustain = sustain;\n    return true;\n  }\n  return false;\n};\n\n// Get current volume\nexport const getVolume = () => globalVolume;\n\n// Get current sustain\nexport const getSustain = () => globalSustain;\n\n// Get current instrument name\nexport const getCurrentInstrumentName = () => currentInstrumentName;\n\n// Load instrument with caching\nexport const loadInstrument = async (instrumentName = DEFAULT_INSTRUMENT) => {\n  // Store the instrument name for reference\n  currentInstrumentName = instrumentName;\n  \n  // Return existing promise if already loading the same instrument\n  if (isLoading && loadPromise) {\n    return loadPromise;\n  }\n  \n  // Initialize audio context if needed\n  if (!audioContext) {\n    await initializeAudio();\n  }\n  \n  isLoading = true;\n  loadPromise = Soundfont.instrument(audioContext, instrumentName, {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    gain: globalVolume, // Apply volume when loading the instrument\n  }).then(loadedInstrument => {\n    instrument = loadedInstrument;\n    console.log(`Loaded instrument: ${instrumentName} with volume: ${globalVolume}`);\n    isLoading = false;\n    return instrument;\n  }).catch(err => {\n    console.error(`Failed to load instrument ${instrumentName}:`, err);\n    isLoading = false;\n    throw err;\n  });\n  \n  return loadPromise;\n};\n\n// Map note to MIDI format (C4, D#3, etc.)\nexport const noteToMidi = (note, octave = 4) => {\n  // If note already has octave (like 'C4'), return as is\n  if (note.match(/[A-G][#b]?[0-9]/)) {\n    return note;\n  }\n  return `${note}${octave}`;\n};\n\n// Play a single note\nexport const playNote = async (note, duration = null, octave = 4) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  const midiNote = noteToMidi(note, octave);\n  return instrument.play(midiNote, audioContext.currentTime, {\n    duration: actualDuration,\n    gain: globalVolume\n  });\n};\n\n// Play a chord (multiple notes at once)\nexport const playChord = async (notes, duration = null, octave = 4) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  // Play each note of the chord with slight timing variance for realism\n  return Promise.all(notes.map((note, index) => {\n    const midiNote = noteToMidi(note, octave);\n    // Small delay between notes (20ms) for more natural sound\n    const delay = index * 0.02;\n    return instrument.play(midiNote, audioContext.currentTime + delay, {\n      duration: actualDuration,\n      gain: globalVolume\n    });\n  }));\n};\n\n// Play a string (open string note)\nexport const playString = async (stringNote, duration = null) => {\n  // Guitar strings are typically tuned to specific octaves\n  const stringOctaves = {\n    'E_low': 2, // Low E (6th string)\n    'A': 2, // A (5th string)\n    'D': 3, // D (4th string)\n    'G': 3, // G (3rd string)\n    'B': 3, // B (2nd string)\n    'E_high': 4  // High E (1st string)\n  };\n  \n  // Determine octave based on string note\n  let octave;\n  if (stringNote === 'E') {\n    // Default to high E, caller should specify E_low if needed\n    octave = 4;\n  } else {\n    octave = stringOctaves[stringNote] || 3;\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  return playNote(stringNote, actualDuration, octave);\n};\n\n// Play a fretted note\nexport const playFrettedNote = async (stringNote, fret, duration = null) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Base octaves for standard guitar tuning\n  const stringOctaves = {\n    'E_low': 2, // Low E (6th string)\n    'A': 2, // A (5th string)\n    'D': 3, // D (4th string)\n    'G': 3, // G (3rd string)\n    'B': 3, // B (2nd string)\n    'E_high': 4  // High E (1st string)\n  };\n  \n  // Determine octave based on string note\n  let octave;\n  if (stringNote === 'E') {\n    // Default to high E, caller should specify stringIndex if needed\n    octave = 4;\n  } else {\n    octave = stringOctaves[stringNote] || 3;\n  }\n  \n  // Calculate the resulting note\n  const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const startNoteIndex = NOTES.indexOf(stringNote);\n  const resultNoteIndex = (startNoteIndex + fret) % 12;\n  const resultNote = NOTES[resultNoteIndex];\n  \n  // Calculate octave shift\n  octave += Math.floor((startNoteIndex + fret) / 12);\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  return playNote(resultNote, actualDuration, octave);\n};\n\n// Get current loaded instrument\nexport const getCurrentInstrument = () => {\n  return instrument;\n};\n\n// Get audio context\nexport const getAudioContext = () => {\n  return audioContext;\n};\n\nexport const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];"],"names":["_ref","rootNote","selectedScale","selectedChord","selectedInstrument","onInstrumentChange","isPlaying","setIsPlaying","useState","audioInitialized","setAudioInitialized","activeElement","setActiveElement","isSettingsOpen","setIsSettingsOpen","volume","setVolume","sustain","setSustain","localInstrument","setLocalInstrument","settingsRef","useRef","instruments","scaleNotes","getScaleNotes","SCALE_LIBRARY","category","name","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","window","initAudio","async","SoundfontAudio","error","console","handleFirstInteraction","once","updateAudioSettings","playNote","note","duration","arguments","length","undefined","getChordRootName","closeSettings","_jsxs","className","children","_jsx","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","d","ref","htmlFor","id","value","onChange","e","Object","entries","map","_ref2","Math","round","type","min","max","step","parseFloat","toFixed","i","Promise","resolve","setTimeout","err","disabled","join","audioContext","instrument","isLoading","loadPromise","globalVolume","globalSustain","currentInstrumentName","initializeAudio","AudioContext","webkitAudioContext","resume","log","loadInstrument","instrumentName","Soundfont","format","soundfont","gain","then","loadedInstrument","catch","noteToMidi","octave","match","actualDuration","midiNote","play","currentTime","playChord","notes","all","index","delay"],"sourceRoot":""}