{"version":3,"file":"static/js/952.54e83e10.chunk.js","mappings":"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","sources":["components/Fretboard.jsx","utils/soundfontAudioUtils.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { NOTES, getScaleNotes, SCALE_LIBRARY, getScaleDegree } from '../utils/musicTheory';\nimport './Fretboard.css';\nimport PropTypes from 'prop-types';\nimport * as SoundfontAudio from '../utils/soundfontAudioUtils';\n\nconst FretboardNote = ({ note, fret, isRoot, selectedScale, showScaleDegrees, rootNote, stringNote, onNoteTap }) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const scaleNotes = selectedScale ? getScaleNotes(rootNote, SCALE_LIBRARY[selectedScale.category][selectedScale.name]) : [];\n  const isInScale = scaleNotes.includes(note);\n  const scaleDegree = isInScale ? getScaleDegree(note, rootNote, SCALE_LIBRARY[selectedScale.category][selectedScale.name]) : '';\n\n  // Determine note type for coloring\n  const getNoteType = () => {\n    if (!isInScale) return '';\n    if (isRoot) return 'root';\n    const interval = scaleNotes.indexOf(note);\n    switch(interval) {\n      case 2: return 'third';\n      case 4: return 'fifth';\n      case 6: return 'seventh';\n      default: return 'scale-note';\n    }\n  };\n\n  // Calculate appropriate octave based on string and fret\n  const getOctave = () => {\n    // Get proper octave based on guitar string\n    let octave;\n    if (stringNote === 'E') {\n      // Determine if it's the low E or high E based on fret position\n      octave = fret < 7 ? 2 : 4; // Assuming low E for simplicity\n    } else if (stringNote === 'A') {\n      octave = 2;\n    } else if (stringNote === 'D' || stringNote === 'G' || stringNote === 'B') {\n      octave = 3;\n    } else {\n      octave = 3; // Default\n    }\n    \n    const startNoteIndex = NOTES.indexOf(stringNote);\n    octave += Math.floor((startNoteIndex + fret) / 12);\n    return octave;\n  };\n\n  return (\n    <div\n      className={`fret ${fret === 0 ? 'first-fret' : ''}`}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {isInScale && (\n        <div \n          className={`note-marker ${getNoteType()}`}\n          onClick={() => onNoteTap(note, getOctave())}\n          style={{ cursor: 'pointer' }}\n        >\n          {showScaleDegrees ? scaleDegree : note}\n        </div>\n      )}\n      {isHovered && (\n        <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 bg-white border border-gray-300 px-2 py-1 rounded shadow z-10\">\n          {note} {scaleDegree && `(${scaleDegree})`}\n        </div>\n      )}\n    </div>\n  );\n};\n\nFretboardNote.propTypes = {\n  note: PropTypes.string.isRequired,\n  fret: PropTypes.number.isRequired,\n  isRoot: PropTypes.bool.isRequired,\n  selectedScale: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n  showScaleDegrees: PropTypes.bool.isRequired,\n  rootNote: PropTypes.string.isRequired,\n  stringNote: PropTypes.string.isRequired,\n  onNoteTap: PropTypes.func.isRequired\n};\n\nconst StringLabel = ({ note, index, onClick }) => (\n  <div \n    className=\"string-label\" \n    onClick={() => onClick(note, index)}\n    style={{ cursor: 'pointer' }}\n  >\n    {note}\n  </div>\n);\n\nStringLabel.propTypes = {\n  note: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nconst Fretboard = ({ rootNote, selectedScale, showScaleDegrees, setShowScaleDegrees, tuning, fretCount, selectedInstrument }) => {\n  const [audioInitialized, setAudioInitialized] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [lastTapTime, setLastTapTime] = useState(0);\n  const [lastTapNote, setLastTapNote] = useState('');\n\n  // Initialize audio on component mount\n  useEffect(() => {\n    const initAudio = async () => {\n      if (typeof window !== 'undefined') {\n        try {\n          await SoundfontAudio.initializeAudio();\n          await SoundfontAudio.loadInstrument(selectedInstrument || 'acoustic_guitar_steel');\n          setAudioInitialized(true);\n        } catch (error) {\n          console.error('Error initializing audio:', error);\n        }\n      }\n    };\n\n    // Initialize on first user interaction\n    const handleFirstInteraction = () => {\n      initAudio();\n      document.removeEventListener('click', handleFirstInteraction);\n    };\n\n    document.addEventListener('click', handleFirstInteraction, { once: true });\n\n    return () => {\n      document.removeEventListener('click', handleFirstInteraction);\n    };\n  }, [selectedInstrument]);\n\n  // Handle instrument changes\n  useEffect(() => {\n    if (audioInitialized && selectedInstrument) {\n      const loadNewInstrument = async () => {\n        try {\n          await SoundfontAudio.loadInstrument(selectedInstrument);\n        } catch (error) {\n          console.error('Error loading instrument:', error);\n        }\n      };\n      loadNewInstrument();\n    }\n  }, [selectedInstrument, audioInitialized]);\n\n  // Play open string\n  const playOpenString = async (stringNote, index) => {\n    if (!audioInitialized) return;\n    \n    try {\n      // Get correct octave based on guitar string\n      let octave;\n      if (stringNote === 'E') {\n        // Determine if it's the low E or high E based on index\n        octave = index === 5 ? 2 : 4;\n      } else if (stringNote === 'A') {\n        octave = 2;\n      } else if (stringNote === 'D' || stringNote === 'G' || stringNote === 'B') {\n        octave = 3;\n      } else {\n        octave = 3; // Default\n      }\n      \n      // Play the string\n      await SoundfontAudio.playNote(stringNote, null, octave);\n    } catch (error) {\n      console.error('Error playing string:', error);\n    }\n  };\n\n  // Handle note tap with double-tap detection to play a note\n  const handleNoteTap = (note, octave) => {\n    const now = Date.now();\n    const doubleTapThreshold = 300; // ms\n    \n    // Check if it's a double tap on the same note\n    if (now - lastTapTime < doubleTapThreshold && lastTapNote === note) {\n      // It's a double tap, so play the note\n      if (audioInitialized && !isPlaying) {\n        setIsPlaying(true);\n        SoundfontAudio.playNote(note, null, octave)\n          .then(() => setTimeout(() => setIsPlaying(false), 300))\n          .catch(error => {\n            console.error('Error playing note:', error);\n            setIsPlaying(false);\n          });\n      }\n    }\n    \n    setLastTapTime(now);\n    setLastTapNote(note);\n  };\n\n  return (\n    <div>\n      <label className=\"flex items-center space-x-2\">\n        <input\n          type=\"checkbox\"\n          checked={showScaleDegrees}\n          onChange={(e) => setShowScaleDegrees(e.target.checked)}\n          className=\"form-checkbox h-4 w-4\"\n        />\n        <span>Show Scale Degrees</span>\n      </label>\n      <p className=\"text-sm text-gray-500 mt-2\">Double-tap on notes to hear them</p>\n      <br />\n      <div className=\"fretboard-container\">\n        <div className=\"string-labels\">\n          {tuning.map((string, index) => (\n            <StringLabel \n              key={index} \n              note={string} \n              index={index} \n              onClick={playOpenString} \n            />\n          ))}\n        </div>\n        <div className=\"fretboard-scroll\">\n          <div className=\"fretboard\">\n            {tuning.map((string, index) => (\n              <div key={index} className=\"string\">\n                {[...Array(fretCount + 1)].map((_, fret) => {\n                  const noteIndex = (NOTES.indexOf(string) + fret) % 12;\n                  const note = NOTES[noteIndex];\n                  const isRoot = note === rootNote;\n\n                  return (\n                    <FretboardNote\n                      key={fret}\n                      note={note}\n                      fret={fret}\n                      isRoot={isRoot}\n                      selectedScale={selectedScale}\n                      showScaleDegrees={showScaleDegrees}\n                      rootNote={rootNote}\n                      stringNote={string}\n                      onNoteTap={handleNoteTap}\n                    />\n                  );\n                })}\n              </div>\n            ))}\n          <div className=\"fret-numbers\">\n            {[...Array(fretCount + 1)].map((_, fret) => (\n              <div key={fret} className=\"fret-number\">\n                {fret}\n              </div>\n            ))}\n          </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nFretboard.propTypes = {\n  rootNote: PropTypes.string.isRequired,\n  selectedScale: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n  showScaleDegrees: PropTypes.bool.isRequired,\n  setShowScaleDegrees: PropTypes.func.isRequired,\n  tuning: PropTypes.arrayOf(PropTypes.string).isRequired,\n  fretCount: PropTypes.number.isRequired,\n  selectedInstrument: PropTypes.string,\n};\n\nexport default Fretboard;","// File: src/utils/soundfontAudioUtils.js\nimport Soundfont from 'soundfont-player';\n\nlet audioContext = null;\nlet instrument = null;\nlet isLoading = false;\nlet loadPromise = null;\n\n// Sound settings\nlet globalVolume = 0.8;\nlet globalSustain = 1.5;\nlet currentInstrumentName = '';\n\nexport const INSTRUMENTS = {\n  'acoustic_guitar_nylon': 'Acoustic Guitar (nylon)',\n  'acoustic_guitar_steel': 'Acoustic Guitar (steel)',\n  'electric_guitar_clean': 'Electric Guitar (clean)',\n  'electric_guitar_jazz': 'Electric Guitar (jazz)',\n  'electric_guitar_muted': 'Electric Guitar (muted)',\n  'overdriven_guitar': 'Overdriven Guitar',\n  'distortion_guitar': 'Distortion Guitar',\n  'guitar_harmonics': 'Guitar Harmonics'\n};\n\n// Default instrument\nconst DEFAULT_INSTRUMENT = 'acoustic_guitar_steel';\n\n// Initialize audio context\nexport const initializeAudio = async () => {\n  if (!audioContext) {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    await audioContext.resume();\n    console.log('Audio context initialized');\n  }\n  return audioContext;\n};\n\n// Set global volume (0-1)\nexport const setVolume = (volume) => {\n  if (volume >= 0 && volume <= 1) {\n    globalVolume = volume;\n    return true;\n  }\n  return false;\n};\n\n// Set global sustain (seconds)\nexport const setSustain = (sustain) => {\n  if (sustain >= 0.1) {\n    globalSustain = sustain;\n    return true;\n  }\n  return false;\n};\n\n// Get current volume\nexport const getVolume = () => globalVolume;\n\n// Get current sustain\nexport const getSustain = () => globalSustain;\n\n// Get current instrument name\nexport const getCurrentInstrumentName = () => currentInstrumentName;\n\n// Load instrument with caching\nexport const loadInstrument = async (instrumentName = DEFAULT_INSTRUMENT) => {\n  // Store the instrument name for reference\n  currentInstrumentName = instrumentName;\n  \n  // Return existing promise if already loading the same instrument\n  if (isLoading && loadPromise) {\n    return loadPromise;\n  }\n  \n  // Initialize audio context if needed\n  if (!audioContext) {\n    await initializeAudio();\n  }\n  \n  isLoading = true;\n  loadPromise = Soundfont.instrument(audioContext, instrumentName, {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    gain: globalVolume, // Apply volume when loading the instrument\n  }).then(loadedInstrument => {\n    instrument = loadedInstrument;\n    console.log(`Loaded instrument: ${instrumentName} with volume: ${globalVolume}`);\n    isLoading = false;\n    return instrument;\n  }).catch(err => {\n    console.error(`Failed to load instrument ${instrumentName}:`, err);\n    isLoading = false;\n    throw err;\n  });\n  \n  return loadPromise;\n};\n\n// Map note to MIDI format (C4, D#3, etc.)\nexport const noteToMidi = (note, octave = 4) => {\n  // If note already has octave (like 'C4'), return as is\n  if (note.match(/[A-G][#b]?[0-9]/)) {\n    return note;\n  }\n  return `${note}${octave}`;\n};\n\n// Play a single note\nexport const playNote = async (note, duration = null, octave = 4) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  const midiNote = noteToMidi(note, octave);\n  return instrument.play(midiNote, audioContext.currentTime, {\n    duration: actualDuration,\n    gain: globalVolume\n  });\n};\n\n// Play a chord (multiple notes at once)\nexport const playChord = async (notes, duration = null, octave = 4) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  // Play each note of the chord with slight timing variance for realism\n  return Promise.all(notes.map((note, index) => {\n    const midiNote = noteToMidi(note, octave);\n    // Small delay between notes (20ms) for more natural sound\n    const delay = index * 0.02;\n    return instrument.play(midiNote, audioContext.currentTime + delay, {\n      duration: actualDuration,\n      gain: globalVolume\n    });\n  }));\n};\n\n// Play a string (open string note)\nexport const playString = async (stringNote, duration = null) => {\n  // Guitar strings are typically tuned to specific octaves\n  const stringOctaves = {\n    'E_low': 2, // Low E (6th string)\n    'A': 2, // A (5th string)\n    'D': 3, // D (4th string)\n    'G': 3, // G (3rd string)\n    'B': 3, // B (2nd string)\n    'E_high': 4  // High E (1st string)\n  };\n  \n  // Determine octave based on string note\n  let octave;\n  if (stringNote === 'E') {\n    // Default to high E, caller should specify E_low if needed\n    octave = 4;\n  } else {\n    octave = stringOctaves[stringNote] || 3;\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  return playNote(stringNote, actualDuration, octave);\n};\n\n// Play a fretted note\nexport const playFrettedNote = async (stringNote, fret, duration = null) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Base octaves for standard guitar tuning\n  const stringOctaves = {\n    'E_low': 2, // Low E (6th string)\n    'A': 2, // A (5th string)\n    'D': 3, // D (4th string)\n    'G': 3, // G (3rd string)\n    'B': 3, // B (2nd string)\n    'E_high': 4  // High E (1st string)\n  };\n  \n  // Determine octave based on string note\n  let octave;\n  if (stringNote === 'E') {\n    // Default to high E, caller should specify stringIndex if needed\n    octave = 4;\n  } else {\n    octave = stringOctaves[stringNote] || 3;\n  }\n  \n  // Calculate the resulting note\n  const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const startNoteIndex = NOTES.indexOf(stringNote);\n  const resultNoteIndex = (startNoteIndex + fret) % 12;\n  const resultNote = NOTES[resultNoteIndex];\n  \n  // Calculate octave shift\n  octave += Math.floor((startNoteIndex + fret) / 12);\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  return playNote(resultNote, actualDuration, octave);\n};\n\n// Get current loaded instrument\nexport const getCurrentInstrument = () => {\n  return instrument;\n};\n\n// Get audio context\nexport const getAudioContext = () => {\n  return audioContext;\n};\n\nexport const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];"],"names":["FretboardNote","_ref","note","fret","isRoot","selectedScale","showScaleDegrees","rootNote","stringNote","onNoteTap","isHovered","setIsHovered","useState","scaleNotes","getScaleNotes","SCALE_LIBRARY","category","name","isInScale","includes","scaleDegree","getScaleDegree","_jsxs","className","onMouseEnter","onMouseLeave","children","_jsx","getNoteType","indexOf","onClick","getOctave","octave","startNoteIndex","NOTES","Math","floor","style","cursor","StringLabel","_ref2","index","_ref3","setShowScaleDegrees","tuning","fretCount","selectedInstrument","audioInitialized","setAudioInitialized","isPlaying","setIsPlaying","lastTapTime","setLastTapTime","lastTapNote","setLastTapNote","useEffect","handleFirstInteraction","async","window","SoundfontAudio","error","console","initAudio","document","removeEventListener","addEventListener","once","loadNewInstrument","playOpenString","handleNoteTap","now","Date","then","setTimeout","catch","type","checked","onChange","e","target","map","string","Array","_","noteIndex","audioContext","instrument","isLoading","loadPromise","globalVolume","globalSustain","currentInstrumentName","initializeAudio","AudioContext","webkitAudioContext","resume","log","setVolume","volume","setSustain","sustain","loadInstrument","instrumentName","arguments","length","undefined","Soundfont","format","soundfont","gain","loadedInstrument","err","noteToMidi","match","playNote","duration","actualDuration","midiNote","play","currentTime","playChord","notes","Promise","all","delay"],"sourceRoot":""}