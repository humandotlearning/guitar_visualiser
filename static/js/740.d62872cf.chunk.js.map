{"version":3,"file":"static/js/740.d62872cf.chunk.js","mappings":"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","sources":["utils/clientOnly.js","components/ChordVisualizer.jsx","utils/soundfontAudioUtils.js"],"sourcesContent":["// Utility to ensure components only render on the client side\nimport { useEffect, useState } from 'react';\n\nexport default function ClientOnly({ children, fallback = null }) {\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  if (!isMounted) {\n    return fallback;\n  }\n\n  return children;\n}\n","import React, { useEffect, useState } from 'react';\nimport { getChordNotes, CHORD_TYPES, SCALE_LIBRARY, getScaleNotes } from '../utils/musicTheory';\nimport PropTypes from 'prop-types';\nimport ClientOnly from '../utils/clientOnly';\nimport * as SoundfontAudio from '../utils/soundfontAudioUtils';\nimport './ChordVisualizer.css';\n\n// Dynamically import the Chord component to avoid SSR issues\nconst ChordComponent = ({ variation, instrument, onPlayChord }) => {\n  const [Chord, setChord] = useState(null);\n  const [lastTapTime, setLastTapTime] = useState(0);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      import('@tombatossals/react-chords/lib/Chord').then((module) => {\n        setChord(() => module.default);\n      });\n    }\n  }, []);\n\n  const handleClick = () => {\n    const now = Date.now();\n    const doubleTapThreshold = 300; // ms\n    \n    if (now - lastTapTime < doubleTapThreshold) {\n      // Double tap detected, play the chord\n      onPlayChord(variation);\n    }\n    \n    setLastTapTime(now);\n  };\n\n  if (!Chord) return <div className=\"h-24 w-full bg-gray-100 animate-pulse rounded\"></div>;\n  return (\n    <div onClick={handleClick} style={{ cursor: 'pointer' }} title=\"Double-tap to play chord\">\n      <Chord chord={variation} instrument={instrument} lite={false} />\n    </div>\n  );\n};\n\nChordComponent.propTypes = {\n  variation: PropTypes.object.isRequired,\n  instrument: PropTypes.object.isRequired,\n  onPlayChord: PropTypes.func.isRequired\n};\n\nconst CHORD_TYPE_MAP = {\n  major: 'major',\n  minor: 'minor',\n  m: 'minor',\n  dim: 'dim',\n  dim7: 'dim7',\n  sus2: 'sus2',\n  sus4: 'sus4',\n  // Add other mappings as needed\n};\n\n// Function to map chord names to JSON keys, handling enharmonic equivalents\nconst mapChordNameToJsonKey = (chordName) => {\n  const enharmonicMap = {\n    'G#': 'Ab',\n    'D#': 'Eb',\n    'E#': 'F',\n    'B#': 'C',\n    'F#': 'G',\n    'C#': 'D',\n    'A#': 'Bb'\n  };\n  return enharmonicMap[chordName] || chordName.replace('#', 'sharp');\n};\n\nconst ChordVisualizer = ({ rootNote, selectedScale, onChordSelect, selectedInstrument }) => {\n  const [chords, setChords] = useState({});\n  const [selectedChord, setSelectedChord] = useState(null);\n  const [selectedChordName, setSelectedChordName] = useState('');\n  const [chordVariations, setChordVariations] = useState([]);\n  const [guitarChordsData, setGuitarChordsData] = useState(null);\n  const [audioInitialized, setAudioInitialized] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [lastTapTime, setLastTapTime] = useState(0);\n  const [lastTapChord, setLastTapChord] = useState(null);\n\n  // Initialize audio when component mounts\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const initAudio = async () => {\n        try {\n          await SoundfontAudio.initializeAudio();\n          await SoundfontAudio.loadInstrument(selectedInstrument || 'acoustic_guitar_steel');\n          setAudioInitialized(true);\n        } catch (error) {\n          console.error('Error initializing audio:', error);\n        }\n      };\n\n      // Initialize on first interaction to avoid autoplay issues\n      const handleFirstInteraction = () => {\n        initAudio();\n        document.removeEventListener('click', handleFirstInteraction);\n      };\n\n      document.addEventListener('click', handleFirstInteraction, { once: true });\n\n      return () => {\n        document.removeEventListener('click', handleFirstInteraction);\n      };\n    }\n  }, [selectedInstrument]);\n\n  // Load the guitar.json data on client-side only\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      import('../db/guitar.json').then((data) => {\n        setGuitarChordsData(data.default);\n      }).catch(err => {\n        console.error('Failed to load guitar chord data:', err);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (rootNote && selectedScale) {\n      const chordNotes = getChordNotes(rootNote, selectedScale);\n      setChords(chordNotes);\n      // Select the root chord by default\n      const rootChord = Object.keys(chordNotes)[0];\n      setSelectedChord(chordNotes[rootChord]);\n      setSelectedChordName(rootChord);\n    }\n  }, [rootNote, selectedScale]);\n\n  // Handle instrument changes\n  useEffect(() => {\n    if (audioInitialized && selectedInstrument) {\n      const loadNewInstrument = async () => {\n        try {\n          await SoundfontAudio.loadInstrument(selectedInstrument);\n        } catch (error) {\n          console.error('Error loading instrument:', error);\n        }\n      };\n      loadNewInstrument();\n    }\n  }, [selectedInstrument, audioInitialized]);\n\n  useEffect(() => {\n    if (selectedChord && guitarChordsData) {\n      const chordName = Object.keys(chords).find(key => chords[key] === selectedChord);\n      setSelectedChordName(chordName || '');\n      const chordTypeIndex = Object.keys(chords).indexOf(chordName);\n      const chordType = CHORD_TYPES[selectedScale.category][chordTypeIndex] || 'major';\n      const chordSuffix = CHORD_TYPE_MAP[chordType] || chordType; // Use the mapping\n\n      // Map chord name to JSON key\n      const jsonKey = mapChordNameToJsonKey(chordName);\n      const chordData = guitarChordsData.chords[jsonKey]?.find(chord => chord.suffix === chordSuffix);\n      if (!chordData) {\n        console.warn(`No chord data found for ${chordName} with type ${chordSuffix}`);\n      }\n\n      const variations = chordData ? chordData.positions : [];\n      setChordVariations(variations);\n    }\n  }, [selectedChord, chords, selectedScale, guitarChordsData]);\n\n  // Handle double tap to select and play chord\n  const handleChordTap = (chordRoot, chordNotes) => {\n    const now = Date.now();\n    const doubleTapThreshold = 300; // ms\n    \n    // Update the selected chord regardless\n    onChordSelect(chordNotes);\n    setSelectedChord(chordNotes);\n    \n    // Check if it's a double tap on the same chord\n    if (now - lastTapTime < doubleTapThreshold && lastTapChord === chordRoot) {\n      // It's a double tap, so play the chord\n      playSelectedChord();\n    }\n    \n    setLastTapTime(now);\n    setLastTapChord(chordRoot);\n  };\n\n  // Play a chord based on variation\n  const playChordVariation = async (variation) => {\n    if (!audioInitialized || isPlaying) return;\n\n    setIsPlaying(true);\n    try {\n      // Extract the notes from the chord variation\n      const notes = [];\n      const tuning = ['E', 'A', 'D', 'G', 'B', 'E']; // Standard guitar tuning\n      const baseFrets = [2, 2, 3, 3, 3, 4]; // Base octaves for each string\n\n      // Process each string in the chord\n      variation.frets.forEach((fret, stringIndex) => {\n        if (fret !== -1) { // -1 means string is not played\n          const stringNote = tuning[tuning.length - 1 - stringIndex]; // Reverse index since chord diagrams go from high to low\n          const baseOctave = baseFrets[stringIndex];\n          \n          const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n          const noteIndex = (NOTES.indexOf(stringNote) + fret) % 12;\n          const note = NOTES[noteIndex];\n          \n          // Calculate octave shift\n          const octaveShift = Math.floor((NOTES.indexOf(stringNote) + fret) / 12);\n          const octave = baseOctave + octaveShift;\n          \n          notes.push({ note, octave });\n        }\n      });\n\n      // Play each note in the chord\n      await Promise.all(notes.map(({ note, octave }) => \n        SoundfontAudio.playNote(note, null, octave)\n      ));\n\n      // Add a slight delay before allowing another chord to be played\n      setTimeout(() => setIsPlaying(false), 1500);\n    } catch (error) {\n      console.error('Error playing chord:', error);\n      setIsPlaying(false);\n    }\n  };\n\n  // Play the selected chord (all notes)\n  const playSelectedChord = async () => {\n    if (!audioInitialized || isPlaying || !selectedChord) return;\n\n    setIsPlaying(true);\n    try {\n      await SoundfontAudio.playChord(selectedChord);\n      setTimeout(() => setIsPlaying(false), 1500);\n    } catch (error) {\n      console.error('Error playing chord:', error);\n      setIsPlaying(false);\n    }\n  };\n\n  if (!rootNote || !selectedScale) {\n    return <div className=\"chord-visualizer\"><p>Please select a scale.</p></div>;\n  }\n\n  const { category, name } = selectedScale;\n  const scaleChords = SCALE_LIBRARY[category][name];\n  const chordTypes = CHORD_TYPES[category];\n  const scaleNotes = getScaleNotes(rootNote, scaleChords);\n\n  const instrument = {\n    strings: 6,\n    fretsOnChord: 4,\n    name: 'Guitar',\n    keys: [],\n    tunings: {\n      standard: ['E', 'A', 'D', 'G', 'B', 'E']\n    }\n  };\n\n  return (\n    <ClientOnly fallback={<div className=\"chord-visualizer p-4\">Loading chord visualizer...</div>}>\n      <div className=\"chord-visualizer\">\n        {/* <h2 className=\"text-xl font-semibold mb-2\">Chords in the Scale</h2> */}\n        \n        {/* {selectedChordName && (\n          // <div className=\"selected-chord-indicator mb-3\">\n          //   <p>Selected: <strong>{selectedChordName}{chordTypes[Object.keys(chords).indexOf(selectedChordName)]}</strong></p>\n          // </div>\n        )} */}\n        \n        <p className=\"double-tap-instruction\">Double-tap on any chord to play it</p>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"chord-table\">\n            <thead>\n              <tr>\n                {scaleNotes.map((note, index) => (\n                  <th key={index}>{note}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {Object.keys(chords).map((chordRoot, index) => {\n                  const isSelected = selectedChord === chords[chordRoot];\n                  return (\n                    <td key={index}>\n                      <button\n                        onClick={() => handleChordTap(chordRoot, chords[chordRoot])}\n                        className={`chord-button ${isSelected ? 'selected-chord' : ''}`}\n                        title=\"Double-tap to play\"\n                      >\n                        {chordRoot}{chordTypes[index]}\n                      </button>\n                      <div className=\"chord-notes\">\n                        {chords[chordRoot].join(', ')}\n                      </div>\n                      <div className=\"chord-degree\">\n                        {index + 1} {chordTypes[index]}\n                      </div>\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        \n        {selectedChord && chordVariations.length > 0 ? (\n          <>\n            <h3 className=\"text-lg font-semibold mt-4 mb-2\">Chord Variations of {selectedChordName}{chordTypes[Object.keys(chords).indexOf(selectedChordName)]}</h3>\n            <p className=\"text-sm mb-2\">Double-tap on a chord diagram to hear how it sounds</p>\n            <div className=\"chord-grid\">\n              {chordVariations.map((variation, index) => (\n                <div key={index} className=\"chord-variation\">\n                  <h3 className=\"variation-title\">Variation {index + 1}</h3>\n                  <ChordComponent \n                    variation={variation} \n                    instrument={instrument} \n                    onPlayChord={playChordVariation}\n                  />\n                </div>\n              ))}\n            </div>\n          </>\n        ) : (\n          <p>No variations available for this chord.</p>\n        )}\n      </div>\n    </ClientOnly>\n  );\n};\n\nChordVisualizer.propTypes = {\n  rootNote: PropTypes.string.isRequired,\n  selectedScale: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n  onChordSelect: PropTypes.func.isRequired,\n  selectedInstrument: PropTypes.string\n};\n\nexport default ChordVisualizer;\n","// File: src/utils/soundfontAudioUtils.js\nimport Soundfont from 'soundfont-player';\n\nlet audioContext = null;\nlet instrument = null;\nlet isLoading = false;\nlet loadPromise = null;\n\n// Sound settings\nlet globalVolume = 0.8;\nlet globalSustain = 1.5;\nlet currentInstrumentName = '';\n\nexport const INSTRUMENTS = {\n  'acoustic_guitar_nylon': 'Acoustic Guitar (nylon)',\n  'acoustic_guitar_steel': 'Acoustic Guitar (steel)',\n  'electric_guitar_clean': 'Electric Guitar (clean)',\n  'electric_guitar_jazz': 'Electric Guitar (jazz)',\n  'electric_guitar_muted': 'Electric Guitar (muted)',\n  'overdriven_guitar': 'Overdriven Guitar',\n  'distortion_guitar': 'Distortion Guitar',\n  'guitar_harmonics': 'Guitar Harmonics'\n};\n\n// Default instrument\nconst DEFAULT_INSTRUMENT = 'acoustic_guitar_steel';\n\n// Initialize audio context\nexport const initializeAudio = async () => {\n  if (!audioContext) {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    await audioContext.resume();\n    console.log('Audio context initialized');\n  }\n  return audioContext;\n};\n\n// Set global volume (0-1)\nexport const setVolume = (volume) => {\n  if (volume >= 0 && volume <= 1) {\n    globalVolume = volume;\n    return true;\n  }\n  return false;\n};\n\n// Set global sustain (seconds)\nexport const setSustain = (sustain) => {\n  if (sustain >= 0.1) {\n    globalSustain = sustain;\n    return true;\n  }\n  return false;\n};\n\n// Get current volume\nexport const getVolume = () => globalVolume;\n\n// Get current sustain\nexport const getSustain = () => globalSustain;\n\n// Get current instrument name\nexport const getCurrentInstrumentName = () => currentInstrumentName;\n\n// Load instrument with caching\nexport const loadInstrument = async (instrumentName = DEFAULT_INSTRUMENT) => {\n  // Store the instrument name for reference\n  currentInstrumentName = instrumentName;\n  \n  // Return existing promise if already loading the same instrument\n  if (isLoading && loadPromise) {\n    return loadPromise;\n  }\n  \n  // Initialize audio context if needed\n  if (!audioContext) {\n    await initializeAudio();\n  }\n  \n  isLoading = true;\n  loadPromise = Soundfont.instrument(audioContext, instrumentName, {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    gain: globalVolume, // Apply volume when loading the instrument\n  }).then(loadedInstrument => {\n    instrument = loadedInstrument;\n    console.log(`Loaded instrument: ${instrumentName} with volume: ${globalVolume}`);\n    isLoading = false;\n    return instrument;\n  }).catch(err => {\n    console.error(`Failed to load instrument ${instrumentName}:`, err);\n    isLoading = false;\n    throw err;\n  });\n  \n  return loadPromise;\n};\n\n// Map note to MIDI format (C4, D#3, etc.)\nexport const noteToMidi = (note, octave = 4) => {\n  // If note already has octave (like 'C4'), return as is\n  if (note.match(/[A-G][#b]?[0-9]/)) {\n    return note;\n  }\n  return `${note}${octave}`;\n};\n\n// Play a single note\nexport const playNote = async (note, duration = null, octave = 4) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  const midiNote = noteToMidi(note, octave);\n  return instrument.play(midiNote, audioContext.currentTime, {\n    duration: actualDuration,\n    gain: globalVolume\n  });\n};\n\n// Play a chord (multiple notes at once)\nexport const playChord = async (notes, duration = null, octave = 4) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  // Play each note of the chord with slight timing variance for realism\n  return Promise.all(notes.map((note, index) => {\n    const midiNote = noteToMidi(note, octave);\n    // Small delay between notes (20ms) for more natural sound\n    const delay = index * 0.02;\n    return instrument.play(midiNote, audioContext.currentTime + delay, {\n      duration: actualDuration,\n      gain: globalVolume\n    });\n  }));\n};\n\n// Play a string (open string note)\nexport const playString = async (stringNote, duration = null) => {\n  // Guitar strings are typically tuned to specific octaves\n  const stringOctaves = {\n    'E_low': 2, // Low E (6th string)\n    'A': 2, // A (5th string)\n    'D': 3, // D (4th string)\n    'G': 3, // G (3rd string)\n    'B': 3, // B (2nd string)\n    'E_high': 4  // High E (1st string)\n  };\n  \n  // Determine octave based on string note\n  let octave;\n  if (stringNote === 'E') {\n    // Default to high E, caller should specify E_low if needed\n    octave = 4;\n  } else {\n    octave = stringOctaves[stringNote] || 3;\n  }\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  return playNote(stringNote, actualDuration, octave);\n};\n\n// Play a fretted note\nexport const playFrettedNote = async (stringNote, fret, duration = null) => {\n  if (!instrument) {\n    try {\n      await loadInstrument();\n    } catch (err) {\n      console.error('Failed to load instrument:', err);\n      return;\n    }\n  }\n  \n  // Base octaves for standard guitar tuning\n  const stringOctaves = {\n    'E_low': 2, // Low E (6th string)\n    'A': 2, // A (5th string)\n    'D': 3, // D (4th string)\n    'G': 3, // G (3rd string)\n    'B': 3, // B (2nd string)\n    'E_high': 4  // High E (1st string)\n  };\n  \n  // Determine octave based on string note\n  let octave;\n  if (stringNote === 'E') {\n    // Default to high E, caller should specify stringIndex if needed\n    octave = 4;\n  } else {\n    octave = stringOctaves[stringNote] || 3;\n  }\n  \n  // Calculate the resulting note\n  const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const startNoteIndex = NOTES.indexOf(stringNote);\n  const resultNoteIndex = (startNoteIndex + fret) % 12;\n  const resultNote = NOTES[resultNoteIndex];\n  \n  // Calculate octave shift\n  octave += Math.floor((startNoteIndex + fret) / 12);\n  \n  // Use global sustain if duration is not provided\n  const actualDuration = duration || globalSustain;\n  \n  return playNote(resultNote, actualDuration, octave);\n};\n\n// Get current loaded instrument\nexport const getCurrentInstrument = () => {\n  return instrument;\n};\n\n// Get audio context\nexport const getAudioContext = () => {\n  return audioContext;\n};\n\nexport const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];"],"names":["ClientOnly","_ref","children","fallback","isMounted","setIsMounted","useState","useEffect","ChordComponent","variation","instrument","onPlayChord","Chord","setChord","lastTapTime","setLastTapTime","window","then","module","default","_jsx","onClick","handleClick","now","Date","style","cursor","title","chord","lite","className","CHORD_TYPE_MAP","major","minor","m","dim","dim7","sus2","sus4","_ref2","rootNote","selectedScale","onChordSelect","selectedInstrument","chords","setChords","selectedChord","setSelectedChord","selectedChordName","setSelectedChordName","chordVariations","setChordVariations","guitarChordsData","setGuitarChordsData","audioInitialized","setAudioInitialized","isPlaying","setIsPlaying","lastTapChord","setLastTapChord","initAudio","async","SoundfontAudio","error","console","handleFirstInteraction","document","removeEventListener","addEventListener","once","data","catch","err","chordNotes","getChordNotes","rootChord","Object","keys","loadNewInstrument","_guitarChordsData$cho","chordName","find","key","chordTypeIndex","indexOf","chordType","CHORD_TYPES","category","chordSuffix","jsonKey","replace","mapChordNameToJsonKey","chordData","suffix","warn","variations","positions","playChordVariation","notes","tuning","baseFrets","frets","forEach","fret","stringIndex","stringNote","length","baseOctave","NOTES","noteIndex","note","octave","Math","floor","push","Promise","all","map","_ref3","setTimeout","playSelectedChord","name","scaleChords","SCALE_LIBRARY","chordTypes","scaleNotes","getScaleNotes","strings","fretsOnChord","tunings","standard","_jsxs","index","chordRoot","isSelected","handleChordTap","join","_Fragment","audioContext","isLoading","loadPromise","globalVolume","globalSustain","currentInstrumentName","initializeAudio","AudioContext","webkitAudioContext","resume","log","setVolume","volume","setSustain","sustain","loadInstrument","instrumentName","arguments","undefined","Soundfont","format","soundfont","gain","loadedInstrument","noteToMidi","match","playNote","duration","actualDuration","midiNote","play","currentTime","playChord","delay"],"sourceRoot":""}